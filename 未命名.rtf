{\rtf1\ansi\ansicpg936\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset134 PingFangSC-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red100\green56\blue32;
\red28\green70\blue74;\red50\green109\blue116;\red155\green35\blue147;\red28\green0\blue207;\red57\green0\blue160;
\red108\green54\blue169;\red93\green108\blue121;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c39147\c22031\c12446;
\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c22454\c0\c62803;
\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c36526\c42188\c47515;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \{\
    \cf4 GLOBAL_GET_DATAMGR\cf2 (dataMgr);\
\
    \cf5 EMMarketCfgDataInfo\cf2  * marketCfgInfo = [dataMgr \cf6 getMarketCfgInfo\cf2 :pStock.\cf6 market\cf2  \cf6 itemId\cf2 :pStock.\cf6 stockCode\cf2 ];\
    
\f1\b \cf7 if
\f0\b0 \cf2  (
\f1\b \cf7 nil
\f0\b0 \cf2  == marketCfgInfo) \{\
        
\f1\b \cf7 return
\f0\b0 \cf2 ;\
    \}\
    \
    \
    \
    
\f1\b \cf7 int
\f0\b0 \cf2  currentTime = \cf8 152200\cf2 ;\
    currentTime/=\cf8 100\cf2 ;\
    \cf9 NSArray\cf2 <\cf9 NSNumber\cf2  *> * times = [marketCfgInfo \cf6 getKLineTimesWithKineCycle\cf2 :nInterval];\
    
\f1\b \cf7 if
\f0\b0 \cf2  (
\f1\b \cf7 nil
\f0\b0 \cf2  == times || \cf8 0\cf2  == times.\cf10 count\cf2 ) \{\
        
\f1\b \cf7 return
\f0\b0 \cf2 ;\
    \}\
    
\f1\b \cf7 int
\f0\b0 \cf2  step = [marketCfgInfo \cf6 getStepLengthWithKlineCycleType\cf2 :nInterval];\
\
    
\f1\b \cf7 int
\f0\b0 \cf2  time = \cf8 0\cf2 ;\
    
\f1\b \cf7 if
\f0\b0 \cf2  (currentTime <= times.\cf10 firstObject\cf2 .\cf10 intValue\cf2 ) \{\
        time = times.\cf10 firstObject\cf2 .\cf10 intValue\cf2 ;\
    \} 
\f1\b \cf7 else
\f0\b0 \cf2  
\f1\b \cf7 if
\f0\b0 \cf2  (currentTime >= times.\cf10 lastObject\cf2 .\cf10 intValue\cf2 ) \{\
        time = times.\cf10 lastObject\cf2 .\cf10 intValue\cf2 ;\
    \} 
\f1\b \cf7 else
\f0\b0 \cf2  \{\
        \cf11 //
\f2 \'d5\'db\'b0\'eb\'b2\'e9\'d5\'d2\'d3\'eb\'d6\'ae\'d7\'ee\'cf\'e0\'bd\'fc\'b5\'c4\'ca\'b1\'bc\'e4
\f0 ;\cf2 \
        \cf9 NSUInteger\cf2  left = \cf8 0\cf2 ;\
        \cf9 NSUInteger\cf2  right = times.\cf10 count\cf2  -\cf8 1\cf2 ;\
        
\f1\b \cf7 while
\f0\b0 \cf2  (left <= right) \{\
            \cf9 NSUInteger\cf2  mid = (left) + (right - left)/\cf8 2\cf2 ;\
            
\f1\b \cf7 if
\f0\b0 \cf2  (mid +\cf8 1\cf2  >= times.\cf10 count\cf2 ) \{\
                
\f1\b \cf7 break
\f0\b0 \cf2 ;\
            \}\
            
\f1\b \cf7 if
\f0\b0 \cf2  (times[mid].\cf10 intValue\cf2  == currentTime) \{\
                \cf11 //
\f2 \'b4\'f3\'d3\'da\'b5\'c8\'d3\'da\'b5\'b1\'c7\'b0\'ca\'b1\'bc\'e4\'b5\'c4\'b6\'bc\'cd\'f9\'ba\'f3\'b9\'e9\'c6\'a9\'c8\'e7\'a3\'ba\'ce\'e5\'b7\'d6\'d6\'d3
\f0 k
\f2 \'cf\'df
\f0  935
\f2 \'b5\'bd
\f0 939
\f2 \'b6\'bc\'b9\'e9\'b5\'bd
\f0 940
\f2 \'c0\'ef\'c3\'e6
\f0 \cf2 \
                
\f1\b \cf7 if
\f0\b0 \cf2  (times[mid +\cf8 1\cf2 ].\cf10 intValue\cf2  - currentTime > step) \{\
                    time = times[mid].\cf10 intValue\cf2 ;\
                \} 
\f1\b \cf7 else
\f0\b0 \cf2  \{\
                    time = times[mid+\cf8 1\cf2 ].\cf10 intValue\cf2 ;\
                \}\
                
\f1\b \cf7 break
\f0\b0 \cf2 ;\
            \}\
            
\f1\b \cf7 if
\f0\b0 \cf2  (times[mid].\cf10 intValue\cf2  < currentTime && times[mid+\cf8 1\cf2 ].\cf10 intValue\cf2  > currentTime) \{\
                
\f1\b \cf7 if
\f0\b0 \cf2  (times[mid +\cf8 1\cf2 ].\cf10 intValue\cf2  - currentTime > step) \{\
                    time = times[mid].\cf10 intValue\cf2 ;\
                \} 
\f1\b \cf7 else
\f0\b0 \cf2  \{\
                    time = times[mid+\cf8 1\cf2 ].\cf10 intValue\cf2 ;\
                \}\
                
\f1\b \cf7 break
\f0\b0 \cf2 ;\
            \}\
            
\f1\b \cf7 if
\f0\b0 \cf2  (times[mid].\cf10 intValue\cf2  > currentTime) \{\
                right = mid;\
            \} 
\f1\b \cf7 else
\f0\b0 \cf2  
\f1\b \cf7 if
\f0\b0 \cf2  (times[mid].\cf10 intValue\cf2  < currentTime) \{\
                left = mid;\
            \}\
        \}\
    \}\
    *pHour = time/\cf8 100\cf2 ;\
    *pMinute = time % \cf8 100\cf2 ;\
    \
\}}